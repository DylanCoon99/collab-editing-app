// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: document_permissions.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getDocumentPermission = `-- name: GetDocumentPermission :one
SELECT permission
FROM document_permissions
WHERE user_id = $1 AND document_id = $2
`

type GetDocumentPermissionParams struct {
	UserID     uuid.UUID
	DocumentID uuid.UUID
}

func (q *Queries) GetDocumentPermission(ctx context.Context, arg GetDocumentPermissionParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getDocumentPermission, arg.UserID, arg.DocumentID)
	var permission sql.NullString
	err := row.Scan(&permission)
	return permission, err
}

const removeDocumentPermission = `-- name: RemoveDocumentPermission :exec
DELETE FROM document_permissions
WHERE user_id = $1 AND document_id = $2
`

type RemoveDocumentPermissionParams struct {
	UserID     uuid.UUID
	DocumentID uuid.UUID
}

func (q *Queries) RemoveDocumentPermission(ctx context.Context, arg RemoveDocumentPermissionParams) error {
	_, err := q.db.ExecContext(ctx, removeDocumentPermission, arg.UserID, arg.DocumentID)
	return err
}

const shareDocument = `-- name: ShareDocument :exec
INSERT INTO document_permissions (user_id, document_id, permission)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, document_id)
DO UPDATE SET permission = EXCLUDED.permission
`

type ShareDocumentParams struct {
	UserID     uuid.UUID
	DocumentID uuid.UUID
	Permission sql.NullString
}

func (q *Queries) ShareDocument(ctx context.Context, arg ShareDocumentParams) error {
	_, err := q.db.ExecContext(ctx, shareDocument, arg.UserID, arg.DocumentID, arg.Permission)
	return err
}
