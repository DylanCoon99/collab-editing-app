// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (title, owner_id, content)
VALUES ($1, $2, $3)
RETURNING id, title, owner_id, content, created_at, updated_at
`

type CreateDocumentParams struct {
	Title   string         `json:"title"`
	OwnerID uuid.NullUUID  `json:"owner_id"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, createDocument, arg.Title, arg.OwnerID, arg.Content)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.OwnerID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDocumentByID = `-- name: GetDocumentByID :one
SELECT id, title, owner_id, content, created_at, updated_at FROM documents
WHERE id = $1
`

func (q *Queries) GetDocumentByID(ctx context.Context, id uuid.UUID) (Document, error) {
	row := q.db.QueryRowContext(ctx, getDocumentByID, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.OwnerID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDocumentsForUser = `-- name: GetDocumentsForUser :many
SELECT d.id, d.title, d.owner_id, d.content, d.created_at, d.updated_at
FROM documents d
LEFT JOIN document_permissions p ON d.id = p.document_id
WHERE d.owner_id = $1 OR p.user_id = $1
`

func (q *Queries) GetDocumentsForUser(ctx context.Context, ownerID uuid.NullUUID) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentsForUser, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.OwnerID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocumentContent = `-- name: UpdateDocumentContent :exec
UPDATE documents
SET content = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateDocumentContentParams struct {
	ID      uuid.UUID
	Content sql.NullString
}

func (q *Queries) UpdateDocumentContent(ctx context.Context, arg UpdateDocumentContentParams) error {
	_, err := q.db.ExecContext(ctx, updateDocumentContent, arg.ID, arg.Content)
	return err
}
