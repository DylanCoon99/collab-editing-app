Plan

Collaborative Document Editing App
- Store Conflict-free Replicated Data Type (CRDT) state or canonical document in the backend (postgreSQL)
- Client have their own working copy (via Yjs/Automerge)
- WebSocket server acts as a pub/sub relay, syncing changes in real-time
- Periodically (or on close), the backend saves the current state

MVP Approach
- Start w/ a centralized storage for simplicity
- Use WebSockets for real-time updates
- Use simple JSON patch/diff syncing btwn clients
- Later, use CRDT as described above (Yjs + WebSocket relay server) to move toward a distributed model


Architecture

- Frontend (React)
	- Users interact via browser
	- Login/Registration UI
	- Dashboard (current users documents)
	- Real time document editor
	- WebSocket client (for live updates)

- HTTP API Server (Go + Gin)
	- Handles all RESTful operationsm, such as:
		- User auth (POST /loginm POST /register)
		- Document CRUD (GET/POST /documents)
		- Permission Sharing (POST /documents/:id/share)
	- Uses JWT middleware for auth
	- Communicates with the PostgreSQL database

- WebSocket Server (Go + Gin)
	- Handles real time collaboration
		- Receives document edits from the a client
		- Broadcasts edits to all other clients connected to the same doc
		- Optionally handles typing indicators, cursors, etc.
	- May share memory/state w/ HTTP server or run as a separate service

- PostgreSQL Database
	- Stores persistent app data
		- Users
		- Documents (title, content, ownership)
		- Permissions (who can view/edit)
		- Optionally: version history or CRDT state blobs



Database Schema

*User

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);


*Document

CREATE TABLE documents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT NOT NULL,
    owner_id UUID REFERENCES users(id) ON DELETE CASCADE,
    content TEXT DEFAULT '', -- OR BYTEA/JSONB for CRDT state
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);


*Document Permissions

CREATE TABLE document_permissions (
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    document_id UUID REFERENCES documents(id) ON DELETE CASCADE,
    permission TEXT CHECK (permission IN ('view', 'edit')),
    PRIMARY KEY (user_id, document_id)
);



Database migration (goose)

goose -dir sql/schema postgres postgres://postgres:M25201430@localhost:5432/collab_docs?sslmode=disable up 



Database Access
psql -U postgres -h localhost -p 5432 -d collab_docs



models w/ json tags

type Document struct {
	ID        uuid.UUID       `json:"id"`
	Title     string          `json:"title"`
	OwnerID   uuid.NullUUID   `json:"owner_id"`
	Content   sql.NullString  `json:"content"`
	CreatedAt sql.NullTime    `json:"created_at"`
	UpdatedAt sql.NullTime    `json:"updated_at"`
}

type DocumentPermission struct {
	UserID     uuid.UUID       `json:"user_id"`
	DocumentID uuid.UUID       `json:"document_d"`
	Permission sql.NullString  `json:"permission"`
}

type User struct {
	ID           uuid.UUID     `json:"id"`
	Email        string        `json:"email"`
	PasswordHash string        `json:"hashed_password"`
	CreatedAt    sql.NullTime  `json:"created_at"`
}


delete this document id: "3ddd9539-6e05-428e-90aa-d36d177dbb3c" at some point


Register New User tests

Request

	POST api/register

	{
	    "email": "myemail@gmail.com",
	    "password": "1234"
	}


Response

	{
	    "body": {
	        "id": "a3be35f6-31df-4077-b70d-0e77dd3abec7",
	        "email": "myemail@gmail.com",
	        "hashed_password": "$2a$10$mL4YhPdsl5jDASJMoyZmb.y45UfK8C8QuJ3lj.Hof/7CP5pe4B.Y.",
	        "created_at": {
	            "Time": "2025-06-22T20:41:54.258161Z",
	            "Valid": true
	        }
	    },
	    "message": "Successfully registered new user."
	}